// Generated by CoffeeScript 1.6.3
(function() {
  var GSAPI;

  GSAPI = (function() {
    var formatAlbumInfo, formatArtistInfo, formatPlaylistInfo, formatSongs, formatUserInfo;

    function GSAPI() {}

    formatPlaylistInfo = function(playlist, playlistID) {
      if (playlistID) {
        return {
          id: playlistID,
          name: playlist.PlaylistName,
          modified: playlist.TSModified,
          description: playlist.PlaylistDescription,
          userID: playlist.UserID,
          coverArt: 'http://images.gs-cdn.net/static/playlists/200_' + body.CoverArtFilename
        };
      } else {
        return {
          id: playlist.PlaylistID,
          name: playlist.PlaylistName,
          added: playlist.TSAdded
        };
      }
    };

    formatSongs = function(songs) {
      var song, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = songs.length; _i < _len; _i++) {
        song = songs[_i];
        _results.push(song = {
          id: song.SongID,
          name: song.SongName,
          artist: {
            id: song.ArtistID,
            name: song.ArtistName
          },
          album: {
            id: song.AlbumID,
            name: song.AlbumName,
            art: song.CoverArtFilename ? 'http://images.gs-cdn.net/static/albums/142_' + song.CoverArtFilename : null
          },
          sort: song.Sort ? song.Sort : null
        });
      }
      return _results;
    };

    formatUserInfo = function(body) {
      return {
        userID: body.UserID,
        firstName: body.FName,
        lastName: body.LName,
        isPremium: body.IsPremium,
        isPlus: body.IsPlus,
        isAnywhere: body.IsAnywhere
      };
    };

    formatArtistInfo = function(body) {
      return {
        id: body.ArtistID,
        name: body.ArtistName
      };
    };

    formatAlbumInfo = function(body) {
      return {
        id: body.AlbumID,
        name: body.AlbumName,
        art: body.CoverArtFilename ? 'http://images.gs-cdn.net/static/albums/142_' + body.CoverArtFilename : null,
        artist: {
          id: body.ArtistID,
          name: body.ArtistName
        }
      };
    };

    GSAPI.prototype.getPlaylist = function(playlistID, cb) {
      var _this = this;
      return this.request('getPlaylist', {
        playlistID: playlistID
      }, function(err, status, body) {
        var info, songs;
        if (err) {
          return cb(err);
        }
        info = formatPlaylistInfo(body, playlistID);
        songs = formatSongs(body.Songs);
        return cb(info, songs);
      });
    };

    GSAPI.prototype.getUserInfo = function(userID, cb) {
      var _this = this;
      if (!cb) {
        cb = userID;
        return this.request('getUserInfo', {}, function(err, status, body) {
          var info;
          if (err) {
            return cb(err);
          }
          info = formatUserInfo(body);
          return cb(info);
        });
      } else {
        if (isNaN(userID)) {
          return this.request('getUserIDFromUsername', {
            username: userID
          }, function(err, status, body) {
            if (err) {
              return cb(err);
            }
            return _this.getUserInfo(body.UserID, cb);
          });
        } else {
          return this.request('getUserInfoFromUserID', {
            userID: userID
          }, function(err, status, body) {
            var info;
            if (err) {
              return cb(err);
            }
            info = formatUserInfo(body);
            return cb(info);
          });
        }
      }
    };

    GSAPI.prototype.getUserLibrary = function(cb) {
      var _this = this;
      return this.request('getUserLibrarySongs', {}, function(err, status, body) {
        var songs;
        if (err) {
          return cb(err);
        }
        songs = formatSongs(body.songs);
        return cb(songs);
      });
    };

    GSAPI.prototype.getUserCollection = function(cb) {
      return this.getUserLibrary(cb);
    };

    GSAPI.prototype.getUserFavorites = function(cb) {
      var _this = this;
      return this.request('getUserFavoriteSongs', {}, function(err, status, body) {
        var songs;
        if (err) {
          return cb(err);
        }
        songs = _this.formatSongs(body.songs);
        return cb(songs);
      });
    };

    GSAPI.prototype.getUserPlaylists = function(userID, cb) {
      var _this = this;
      if (!cb) {
        cb = userID;
        return this.request('getUserPlaylists', {}, function(err, status, body) {
          var playlist, playlists;
          if (err) {
            return cb(err);
          }
          playlists = (function() {
            var _i, _len, _ref, _results;
            _ref = body.playlists;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              playlist = _ref[_i];
              _results.push(formatPlaylistInfo(playlist));
            }
            return _results;
          })();
          return cb(playlists);
        });
      } else {
        if (isNaN(userID)) {
          return this.request('getUserIDFromUsername', {
            username: userID
          }, function(err, status, body) {
            if (err) {
              return cb(err);
            }
            return _this.getUserPlaylists(body.UserID, cb);
          });
        } else {
          return this.request('getUserPlaylistsByUserID', {
            userID: userID
          }, function(err, status, body) {
            var playlist, playlists;
            if (err) {
              return cb(err);
            }
            playlists = (function() {
              var _i, _len, _ref, _results;
              _ref = body.playlists;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                playlist = _ref[_i];
                _results.push(formatPlaylistInfo(playlist));
              }
              return _results;
            })();
            return cb(playlists);
          });
        }
      }
    };

    GSAPI.prototype.searchSongs = function(song, country, cb) {
      var _this = this;
      if (!cb) {
        cb = country;
        country = 'USA';
      }
      return this.request('getSongSearchResults', {
        query: song,
        country: country
      }, function(err, status, body) {
        var songs;
        if (err) {
          return cb(err);
        }
        songs = formatSongs(body.songs);
        return cb(songs);
      });
    };

    GSAPI.prototype.searchPlaylists = function(playlistName, cb) {
      var _this = this;
      return this.request('getPlaylistSearchResults', {
        query: playlistName
      }, function(err, status, body) {
        var playlist, playlists;
        if (err) {
          return cb(err);
        }
        playlists = (function() {
          var _i, _len, _ref, _results;
          _ref = body.playlists;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            playlist = _ref[_i];
            _results.push(formatPlaylistInfo(playlist));
          }
          return _results;
        })();
        return cb(playlists);
      });
    };

    GSAPI.prototype.searchArtists = function(artistName, cb) {
      var _this = this;
      return this.request('getArtistSearchResults', {
        query: artistName
      }, function(err, status, body) {
        var artist, artists;
        if (err) {
          return cb(err);
        }
        artists = (function() {
          var _i, _len, _ref, _results;
          _ref = body.artists;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            artist = _ref[_i];
            _results.push(formatArtistInfo(artist));
          }
          return _results;
        })();
        return cb(artists);
      });
    };

    GSAPI.prototype.searchAlbums = function(albumName, cb) {
      var _this = this;
      return this.request('getAlbumSearchResults', {
        query: albumName
      }, function(err, status, body) {
        var album, albums;
        if (err) {
          return cb(err);
        }
        albums = (function() {
          var _i, _len, _ref, _results;
          _ref = body.albums;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            album = _ref[_i];
            _results.push(formatAlbumInfo(album));
          }
          return _results;
        })();
        return cb(albums);
      });
    };

    return GSAPI;

  })();

  module.exports = GSAPI;

}).call(this);
